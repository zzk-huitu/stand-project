<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		">

	<!-- redis集群配置 至少3个主 3个从 <bean id="redisClusterConfiguration" class="org.springframework.data.redis.connection.RedisClusterConfiguration"> 
		<property name="maxRedirects" value="${redis.maxRedirects}"></property> <property 
		name="clusterNodes"> <set> <bean class="org.springframework.data.redis.connection.RedisNode"> 
		<constructor-arg name="host" value="${redis.hostName}"></constructor-arg> 
		<constructor-arg name="port" value="${redis.port}"></constructor-arg> </bean> 
		</set> </property> </bean> -->


	<!-- redis主从配置，需要先在redis服务器中设置好主从与哨兵 <bean id="redisSentinelConfiguration" 
		class="org.springframework.data.redis.connection.RedisSentinelConfiguration"> 
		<property name="master"> <bean class="org.springframework.data.redis.connection.RedisNode"> 
		<property name="name" value="${redis.sentinel.masterName}" /> </bean> </property> 
		<property name="sentinels"> <set> <bean class="org.springframework.data.redis.connection.RedisNode"> 
		<constructor-arg name="host" value="${redis.sentinel1.host}"></constructor-arg> 
		<constructor-arg name="port" value="${redis.sentinel1.port}"></constructor-arg> 
		</bean> <bean class="org.springframework.data.redis.connection.RedisNode"> 
		<constructor-arg name="host" value="${redis.sentinel2.host}"></constructor-arg> 
		<constructor-arg name="port" value="${redis.sentinel2.port}"></constructor-arg> 
		</bean> </set> </property> </bean> -->

	<!-- redis连接池配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!--可用连接实例的最大数目，默认值为8； -->
		<property name="maxTotal" value="${redis.pool.maxTotal}"></property>
		<!--控制一个pool最多有多少个状态为idle(空闲的)的jedis实例，默认值也是8 -->
		<property name="maxIdle" value="${redis.pool.maxIdle}"></property>
		<!--控制一个pool最少有多少个状态为idle(空闲的)的jedis实例，默认值是0 -->
		<property name="minIdle" value="${redis.pool.minIdle}"></property>
		<!--等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException； -->
		<property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}"></property>
		<!-- 在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的 -->
		<property name="testOnBorrow" value="true"></property>
		<property name="testOnReturn" value="true"></property>
	</bean>

	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		destroy-method="destroy">
		<!-- 单服务器模式 -->
		<property name="hostName" value="${redis.hostName}" />
		<property name="port" value="${redis.port}" />
		<property name="timeout" value="${redis.timeout}" />
		<property name="database" value="${redis.database}" />
		<property name="password" value="${redis.password}" />
		<property name="usePool" value="true" />
		<property name="poolConfig" ref="jedisPoolConfig" />


		<!-- 主从模式配置方式-->
		<!-- 
			<constructor-arg name="sentinelConfig" ref="redisSentinelConfiguration"></constructor-arg> 
			<constructor-arg name="poolConfig" ref="jedisPoolConfig"></constructor-arg> 
			<property name="password" value="${redis.sentinel.password}"/> 
		-->
	</bean>

	<!-- redisTemplate封装类 设置此redisTemplate类的序列化方式 建议key/hashKey采用StringRedisSerializer。 -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory">

		<property name="keySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<property name="hashValueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>

	</bean>

	<!-- 对string操作的封装 -->
	<!-- 这里配置了RedisTemplate和StringRedisTemplate,不同之处在于StringRedisTemplate的Key-Value序列化使用的是StringRedisSerializer。 -->
	<!-- 但在上面的 RedisTemplate 配置中，我们指定了key/hashKey的序列化方式为StringRedisSerializer -->
	<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory" />





</beans>
